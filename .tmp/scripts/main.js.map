{"version":3,"sources":["main.js"],"names":["contract_abidefinition","contract_address","contract","window","addEventListener","web3","Web3","providers","HttpProvider","startApp","isConnected","console","log","callMe","updateUI","getNodeVersion","retrieveDeployedContract","getMessageFromContract","getLastSentAddress","version","getNode","error","result","eth","at","watchForEvent","getMessage","call","setMessageInContract","message","setMessage","MessageWritten","target","fromBlock","toBlock","watch"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * ABI and contract\n * \n */\nvar contract_abidefinition = [{ \"constant\": false, \"inputs\": [ { \"name\": \"passedMessage\", \"type\": \"string\" } ], \"name\": \"setMessage\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"getMessage\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"getLastSentAddress\", \"outputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"name\": \"initMessage\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [], \"name\": \"MessageWritten\", \"type\": \"event\" }];\n\nvar contract_address = '0xce7b614c490374eb56168bbd1904fa07b2d85c18';\nvar contract;\n\n\n/**\n * Web page load listener\n */\nwindow.addEventListener('load', function() {\n    /***\n     * Commented out the below code because currently watching events seems to only work from using the web3 instance from the private chain\n     * \n     */\n\n    //Is web3 injected by meta mask?\n    // if (typeof web3 !== 'undefined') {\n    //     //Use web3 provided by metamask\n    //     window.web3 = new Web3(web3.currentProvider);\n    //     console.log(\"Web 3 provided by metamask\");\n    // } else {\n    //     console.log(\"Web 3 NOT injected by metamask\");\n\n    //     //Use web3 from local node\n    //     //Only if a geth or testrpc node is running?\n    //     //CURRENTLY ONLY WORKS WITH METAMASK\n    //     window.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n    // }\n\n\n    //Web3 instance from the private geth console\n    window.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n\n    startApp();\n});\n\n\n/**\n * Function that kicks off the app\n */\nfunction startApp() {\n\n    if (web3 && web3.isConnected()) {\n        //Testing if we can log print\n        console.log(\"Web 3 is connected\");\n\n        //Testing if we can use utils.js\n        callMe();\n\n        //Testing if we can update the UI\n        updateUI('connect_status', 'Connected', false);\n    }\n\n    getNodeVersion();\n    retrieveDeployedContract();\n    getMessageFromContract(contract);\n    getLastSentAddress();\n}\n\n/**\n * Function to understand web3 api\n */\n\nfunction getNodeVersion() {\n    web3.version.getNode(function(error, result) {\n        if (error) console.log(\"There was an error: \" + error);\n        else {\n            console.log(\"There was a result: \" + result);\n        }\n    });\n}\n\n\n\n/**\n * Functions to interact with deployed contract\n */\nfunction retrieveDeployedContract() {\n    // Retrieved the contract from the local geth node\n    contract = web3.eth.contract(contract_abidefinition).at(contract_address);\n    watchForEvent();\n}\n\nfunction getMessageFromContract(contract) {\n    console.log(\"Getting message from contract\");\n    contract.getMessage.call(function(error, result) {\n        if (error) {\n            console.log(\"There was an error\");\n            updateUI('message_set', error, true);\n        } else {\n            updateUI('message_set', result, false);\n            console.log(\"Updated UI message successfully\"); \n            console.log(result);\n\n            getLastSentAddress();\n        }\n    });\n}\n\nfunction setMessageInContract(message) {\n    console.log(contract);\n    contract.setMessage(message, function(error, result) {\n        if (error) {\n            console.log(error);\n        }\n        else {\n            console.log('Now printing the reuslt')\n            console.log(result);\n        }\n    });\n}\n\nfunction getLastSentAddress() {\n    console.log(\"Calling get last sent address\")\n    contract.getLastSentAddress.call(function(error, result) {\n        if (error) {\n            console.log(\"There was an error\");\n            updateUI('last_address', \"No address set\", false);\n        }\n        else {\n            updateUI('last_address', result, false);\n        }\n    });\n}\n\n/**\n * Filters for monitoring change in deployed contract state\n */\nfunction watchForEvent() {\n    contract.MessageWritten({target: \"MessageWritten\"}, {fromBlock: 0, toBlock: 'latest'}).watch(function(error, result) {\n        if (error)\n            console.log(\"error\")\n        else {\n            console.log(\"events fired\");\n            getMessageFromContract(contract);\n        }\n            \n    });\n    \n}\n"]}